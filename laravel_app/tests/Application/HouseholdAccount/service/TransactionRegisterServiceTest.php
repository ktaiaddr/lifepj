<?php

namespace Tests\Application\HouseholdAccount\service;

use App\Application\HouseholdAccount\service\TransactionRegisterService;
use App\Domain\HouseholdAccount\Model\Transaction\RegisterCommand;
use App\Domain\HouseholdAccount\Model\Transaction\Transaction;


//use PHPUnit\Framework\TestCase;
use App\Domain\HouseholdAccount\Model\Transaction\TransactionType;
use App\Models\HouseholdAccount\EloquentAccountBalance;
use App\Models\HouseholdAccount\EloquentAccout;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Str;
use Tests\TestCase;

class TransactionRegisterServiceTest extends TestCase
{
    use RefreshDatabase;

    private TransactionRegisterService $transactionService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
//        $pdo = DB::getPdo();
//        $stmt = $pdo->prepare('truncate refuelings');
//        $stmt->execute();
//        app()->bind(AccountQuery::class,AccountInmemoryQuery::class);
//        app()->singleton(TransactionRepository::class,TransactionInmemoryRepository::class);
        $this->transactionService = app()->make(TransactionRegisterService::class);;

        EloquentAccountBalance::create([
            'transaction_id' => (string)Str::orderedUuid(),
            'account_id' => 1,
            'increase_decrease_type' => 1,
        ]);

        EloquentAccountBalance::create([
            'transaction_id' => (string)Str::orderedUuid(),
            'account_id' => 2,
            'increase_decrease_type' => 2,
        ]);

        EloquentAccout::create([
            'account_id'=>1,
            'user_id'=>1,
            'type'=>1,
            'name'=>"hoge",
        ]);
        EloquentAccout::create([
            'account_id'=>2,
            'user_id'=>1,
            'type'=>1,
            'name'=>"fuga",
        ]);

    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    /**
     * @test
     */
    public function test_登録(){
        $amount = 1001;
        $registerCommand = new RegisterCommand($amount,'2021-10-10',TransactionType::CLASSIFICATION_ACCOUNT_TRANSFER,1,2,"amema");
        $this->transactionService->do($registerCommand,1);
    }
}
