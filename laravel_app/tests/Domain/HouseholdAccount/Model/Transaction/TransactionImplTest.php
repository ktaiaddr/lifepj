<?php

namespace Tests\Domain\HouseholdAccount\Model\Transaction;

use App\Application\HouseholdAccount\query\AccountBalanceQuery;
use App\Domain\HouseholdAccount\Model\Account\Account;
use App\Domain\HouseholdAccount\Model\Account\AccountType;
use App\Domain\HouseholdAccount\Model\Account\Increaser;
use App\Domain\HouseholdAccount\Model\Account\Reducer;
use App\Domain\HouseholdAccount\Model\Transaction\Transaction;
use App\Domain\HouseholdAccount\Model\Transaction\TransactionAmount;
use App\infra\HouseholdAccount\EloquentRepository\ModelBuilder;
use App\infra\HouseholdAccount\inmemoryQuery\InmemoryAccountBalanceQuery;
use App\Models\HouseholdAccount\EloquentAccountBalance;
use App\Models\HouseholdAccount\EloquentAccout;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Str;
//use PHPUnit\Framework\TestCase;
use Tests\TestCase;

class TransactionImplTest extends TestCase
{

    use RefreshDatabase;

    const ACCOUNT_BANK1      = 1;
    const ACCOUNT_BANK1_AMOUNT = 200;
    const ACCOUNT_BANK2      = 2;
    const ACCOUNT_BANK2_AMOUNT = 100;
    const ACCOUNT_HAND_MONEY = 3;
    const ACCOUNT_HAND_MONEY_AMOUNT = 5000;

    private AccountBalanceQuery $accountBalanceQuery;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //インメモリデータの準備
        $this->accountBalanceQuery =app()->make(AccountBalanceQuery::class);

        EloquentAccountBalance::create([
            'transaction_id' => (string)Str::orderedUuid(),
            'account_id' => self::ACCOUNT_BANK1,
            'balance' => self::ACCOUNT_BANK1_AMOUNT,
        ]);

        EloquentAccountBalance::create([
            'transaction_id' => (string)Str::orderedUuid(),
            'account_id' => self::ACCOUNT_BANK2,
            'balance' => self::ACCOUNT_BANK2_AMOUNT,
        ]);

        EloquentAccountBalance::create([
            'transaction_id' => (string)Str::orderedUuid(),
            'account_id' => self::ACCOUNT_HAND_MONEY,
            'balance' => self::ACCOUNT_HAND_MONEY_AMOUNT,
        ]);

        EloquentAccout::create([
            'account_id'=>self::ACCOUNT_BANK1,
            'user_id'=>1,
            'type'=>AccountType::TYPE_BANK,
            'name'=>"hoge",
        ]);
        EloquentAccout::create([
            'account_id'=>self::ACCOUNT_BANK2,
            'user_id'=>1,
            'type'=>AccountType::TYPE_BANK,
            'name'=>"fuga",
        ]);
        EloquentAccout::create([
            'account_id'=>self::ACCOUNT_HAND_MONEY,
            'user_id'=>1,
            'type'=>AccountType::TYPE_HAND_MONEY,
            'name'=>"fuga",
        ]);
    }

    /**
     * @return \int[][]
     */
    public function トランザクションtestProvider():array{
        return [
            '口座間転送アカウント１⇨２に１９９円送金'=> [
                ['reduce'=>[self::ACCOUNT_BANK1,self::ACCOUNT_BANK1_AMOUNT -199],'increase'=>[self::ACCOUNT_BANK2, self::ACCOUNT_BANK2_AMOUNT+199]],
                199,
                Transaction::CLASSIFICATION_ACCOUNT_TRANSFER,
                '正常処理'
            ],
            '現金加算2９９円'=> [
                ['increase'=>[self::ACCOUNT_HAND_MONEY, self::ACCOUNT_HAND_MONEY_AMOUNT + 299]],
                299,
                Transaction::CLASSIFICATION_CASH_ADDITION,
                '正常処理'
            ],
            '現金払い１９９円'=> [
                ['reduce'=>[self::ACCOUNT_HAND_MONEY,self::ACCOUNT_HAND_MONEY_AMOUNT -199]],
                199,
                Transaction::CLASSIFICATION_CASH_PAYMENT,
                '正常処理'
            ],
            '口座引落し１９９円'=> [
                ['reduce'=>[self::ACCOUNT_BANK2,self::ACCOUNT_BANK2_AMOUNT-95]],
                95,
                Transaction::CLASSIFICATION_DIRECT_DEVIT,
                '正常処理'
            ],
            '入金　アカウント１⇨２に100000円'=> [[
                'increase'=>[self::ACCOUNT_BANK1, self::ACCOUNT_BANK1_AMOUNT+100000]],
                100000,
                Transaction::CLASSIFICATION_MONEY_RECEIVED,
                '正常処理'
            ],
            '引き出し１９９円送金する'=> [
                ['reduce'=>[self::ACCOUNT_BANK2,self::ACCOUNT_BANK2_AMOUNT-28], 'increase'=>[self::ACCOUNT_HAND_MONEY, self::ACCOUNT_HAND_MONEY_AMOUNT+28]],
                28,
                Transaction::CLASSIFICATION_WITHDRAWAL_DEPOSIT,
                '正常処理'
            ],
            '口座振替アカウントエラー' => [null,1,Transaction::CLASSIFICATION_ACCOUNT_TRANSFER,'口座振替アカウントエラー'],
            '現金加算アカウントエラー' => [null,1,Transaction::CLASSIFICATION_CASH_ADDITION,'現金加算アカウントエラー'],
            '現金払いアカウントエラー' => [null,1,Transaction::CLASSIFICATION_CASH_PAYMENT,'現金払いアカウントエラー'],
            '口座引落しアカウントエラー' => [null,1,Transaction::CLASSIFICATION_DIRECT_DEVIT,'口座引落しアカウントエラー'],
            '入金アカウントエラー' => [null,1,Transaction::CLASSIFICATION_MONEY_RECEIVED,'入金アカウントエラー'],
            '引き出しアカウントエラー' => [null,1,Transaction::CLASSIFICATION_WITHDRAWAL_DEPOSIT,'引き出しアカウントエラー'],
            '取引区分が不正です' => [null,1,99,'取引区分が不正です'],
        ];
    }
// '口座振替',
// '現金加算',
// '現金払い',
// '口座引落し',
// '入金',
// '引き出し',
    /**
     * @dataProvider トランザクションtestProvider
     * @param array|null $accounts
     * @param int $amount
     * @param int $transactionTypeValue
     * @param string $processResult
     */
    public function test_トランザクション(?array $accounts,int $amount,int $transactionTypeValue,string $processResult){

        if(isset($accounts['reduce'])){
            $reduceAccountId = $accounts['reduce'][0];
            $reduceAccountResult = $accounts['reduce'][1];
        }
        if(isset($accounts['increase'])){
            $increaseAccountId = $accounts['increase'][0];
            $increaseAccountResult = $accounts['increase'][1];
        }

        $result = "正常処理";

        $reducer = null;

        $increaser = null;

        try{

            //取引IDをUUIDで生成
            $transactionId = (string)Str::orderedUuid();

            //取引日を現在日時で生成
            $transactionDate = new \Datetime();

            //取引金額を生成
            $transactionAmount = new TransactionAmount($amount);

            //取引内容
            $transactionContents = "";

            //取引を生成
            $transaction = new Transaction($transactionTypeValue, $transactionAmount);

            if(isset($reduceAccountId)){
                $reduceAccount = $this->accountBalanceQuery->find($reduceAccountId);
                $reducer = new Reducer($reduceAccount);
            }

            if(isset($increaseAccountId)){
                $increaseAccount = $this->accountBalanceQuery->find($increaseAccountId);
                $increaser = new Increaser($increaseAccount);
            }

            $accounts = $transaction->process($reducer, $increaser);


            $modelBuilder = new ModelBuilder();
            $modelBuilder->transactionId($transactionId);
            $modelBuilder->transactionDate($transactionDate);
            $modelBuilder->transactionContents($transactionContents);
            $transaction->notify($modelBuilder);
            for($i=0;$i<count($accounts);$i++){
                $accounts[$i]->notify($transactionId,$modelBuilder);
            }


        }catch (\Exception $e){
            $result = $e->getMessage();
        }

        $this->assertSame($processResult,$result);

        if($result == "正常処理"){
            foreach($modelBuilder->balances as $balance){

                if(isset($reduceAccountId)){
                    if((int)($balance->accountId) === $reduceAccountId)
                        $this->assertSame($reduceAccountResult,$balance->balance);
                }

                if(isset($increaseAccountId)){
                    if((int)($balance->accountId) === $increaseAccountId)
                        $this->assertSame($increaseAccountResult,$balance->balance);
                }

            }
        }
    }
}
