<?php

namespace Tests\Http\Controllers\Api\HouseholdAccount;

use App\Application\HouseholdAccount\service\TransactionRegisterService;
use App\Domain\HouseholdAccount\Model\Account\AccountType;
use App\Domain\HouseholdAccount\Model\Transaction\Transaction;
use App\Domain\HouseholdAccount\Model\Transaction\TransactionType;
use App\Http\Controllers\Api\HouseholdAccount\RegisterController;
//use PHPUnit\Framework\TestCase;
use App\Models\HouseholdAccount\EloquentAccountBalance;
use App\Models\HouseholdAccount\EloquentAccout;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Str;
use Tests\TestCase;

class RegisterControllerTest extends TestCase
{

    use RefreshDatabase;

    private TransactionRegisterService $transactionService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->transactionService = app()->make(TransactionRegisterService::class);;

        EloquentAccountBalance::create([
            'transaction_id' => (string)Str::orderedUuid(),
            'account_id' => 1,
            'balance' => 100000,
        ]);

        EloquentAccountBalance::create([
            'transaction_id' => (string)Str::orderedUuid(),
            'account_id' => 2,
            'balance' => 200000,
        ]);
        EloquentAccountBalance::create([
            'transaction_id' => (string)Str::orderedUuid(),
            'account_id' => 3,
            'balance' => 100,
        ]);
        EloquentAccout::create([
            'account_id'=>1,
            'user_id'=>1,
            'type'=>AccountType::TYPE_BANK,
            'name'=>"hoge",
        ]);
        EloquentAccout::create([
            'account_id'=>2,
            'user_id'=>1,
            'type'=>AccountType::TYPE_BANK,
            'name'=>"fuga",
        ]);
        EloquentAccout::create([
            'account_id'=>3,
            'user_id'=>1,
            'type'=>AccountType::TYPE_HAND_MONEY,
            'name'=>"fuga",
        ]);
    }

    public function dataProvider(){

        $ACCOUNT_TRANSFER_200 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_ACCOUNT_TRANSFER,$reduceAccountId=1,$increaseAccountId=2,$contents="test"];
        $ACCOUNT_TRANSFER_422 = [$user_id=1,$amount=null,$transactionType=TransactionType::CLASSIFICATION_ACCOUNT_TRANSFER,$reduceAccountId=null,$increaseAccountId=null,$contents="test"];

        $CASH_ADDITION_200 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_CASH_ADDITION,$reduceAccountId=null,$increaseAccountId=3,$contents="test"];
        $CASH_ADDITION_422 = [$user_id=1,$amount=null,$transactionType=TransactionType::CLASSIFICATION_CASH_ADDITION,$reduceAccountId=null,$increaseAccountId=null,$contents="test"];
        $CASH_PAYMENT_200 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_CASH_PAYMENT,$reduceAccountId=3,$increaseAccountId=null,$contents="test"];
        $CASH_PAYMENT_422 = [$user_id=1,$amount=null,$transactionType=TransactionType::CLASSIFICATION_CASH_PAYMENT,$reduceAccountId=null,$increaseAccountId=null,$contents="test"];
        $DIRECT_DEVIT_200 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_DIRECT_DEVIT,$reduceAccountId=2,$increaseAccountId=null,$contents="test"];
        $DIRECT_DEVIT_422 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_DIRECT_DEVIT,$reduceAccountId=null,$increaseAccountId=null,$contents=null];
        $MONEY_RECEIVED_200 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_MONEY_RECEIVED,$reduceAccountId=null,$increaseAccountId=1,$contents="test"];
        $MONEY_RECEIVED_422 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_MONEY_RECEIVED,$reduceAccountId=null,$increaseAccountId=null,$contents=null];
        $WITHDRAWAL_DEPOSIT_200 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_WITHDRAWAL_DEPOSIT,$reduceAccountId=1,$increaseAccountId=3,$contents="test"];
        $WITHDRAWAL_DEPOSIT_422 = [$user_id=1,$amount=100,$transactionType=TransactionType::CLASSIFICATION_WITHDRAWAL_DEPOSIT,$reduceAccountId=null,$increaseAccountId=null,$contents=null];

        $ajax_header = ['X-Requested-With' => 'XMLHttpRequest'];
        $empty_header = [];

        return [
            "非ajaxのエラー" => [...$ACCOUNT_TRANSFER_200,$status=400,$empty_header],

            "口座振替成功" => [...$ACCOUNT_TRANSFER_200,$status=200,$ajax_header],
            "口座振替パラメーター422エラー" => [...$ACCOUNT_TRANSFER_422,$status=422,$ajax_header],

            '現金加算成功_$CASH_ADDITION_200'                        => [...$CASH_ADDITION_200,$status=200,$ajax_header],
            '現金加算パラメーター422エラー_$CASH_ADDITION_422'         => [...$CASH_ADDITION_422,$status=422,$ajax_header],
            '現金払い成功_$CASH_PAYMENT_200'                        => [...$CASH_PAYMENT_200,$status=200,$ajax_header],
            '現金払いパラメーター422エラー_$CASH_PAYMENT_422'         => [...$CASH_PAYMENT_422,$status=422,$ajax_header],
            '口座引き落とし成功_$DIRECT_DEVIT_200'                   => [...$DIRECT_DEVIT_200,$status=200,$ajax_header],
            '口座引き落としパラメーター422エラー_$DIRECT_DEVIT_422'    => [...$DIRECT_DEVIT_422,$status=422,$ajax_header],
            '入金成功_$MONEY_RECEIVED_200'                            => [...$MONEY_RECEIVED_200,$status=200,$ajax_header],
            '入金パラメーター422エラー_$MONEY_RECEIVED_422'             => [...$MONEY_RECEIVED_422,$status=422,$ajax_header],
            '引き出し成功_$WITHDRAWAL_DEPOSIT_200'                         => [...$WITHDRAWAL_DEPOSIT_200,$status=200,$ajax_header],
            '引き出しパラメーター422エラー_$WITHDRAWAL_DEPOSIT_422'          => [...$WITHDRAWAL_DEPOSIT_422,$status=422,$ajax_header],
        ];
    }

    /**
     * @dataProvider dataProvider
     */
    public function test_RegisterController__regist(int $userId,?int $amount, int $transactionType,
                                                      ?int $reduceAccountId,
                                                      ?int $increaseAccountId,
                                                    ?string $contents,
                                                      int $status,
                                                      array $header){

        $user = new User();
        $user->id = $userId;
        $response = $this->actingAs($user)->json('POST','/api/household_account',[
            "amount" =>  $amount,
            "transactionTypeValue" => $transactionType,
            "reduceAccountId" =>  $reduceAccountId,
            "increaseAccountId" =>  $increaseAccountId,
            "contents" => $contents,
        ],$header);

        $response->assertStatus($status);

        $response->dump();
    }
}
