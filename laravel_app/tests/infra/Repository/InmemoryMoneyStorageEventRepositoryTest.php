<?php

namespace Tests\infra\Repository;

use App\Domain\Object\MoneyStorage\IMoneyStorageEventRepository;
use App\Domain\Object\MoneyStorage\MoneyStorageEvent;
use App\Domain\Object\MoneyStorage\MoneyStorageEventAmount;
use App\Domain\Object\MoneyStorage\MoneyStorageEventMemo;
use App\Domain\Object\MoneyStorage\MoneyStorageEventType;
use App\Domain\Object\MoneyStorage\MoneyStorageId;
use App\infra\Repository\InmemoryMoneyStorageEventRepository;
use PHPUnit\Framework\TestCase;
use ReflectionClass;

class InmemoryMoneyStorageEventRepositoryTest extends TestCase
{
    private IMoneyStorageEventRepository $moneyStorageEventRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->moneyStorageEventRepository = new InmemoryMoneyStorageEventRepository();
    }

    /**
     */
    public function test_save(){

        $moneyStorageEvent1 = $this->moneyStorageEventRepository->save($this->moneyStorageEvent());
        $this->assertSame(1,$moneyStorageEvent1->getId());

        $moneyStorageEvent2 = $this->moneyStorageEventRepository->save($this->moneyStorageEvent());
        $this->assertSame(2,$moneyStorageEvent2->getId());

        // Reflectionクラスをインスタンス化
        $reflectionClass = new ReflectionClass($moneyStorageEvent2);
        // プロパティの値を取得
        $p_amount = $reflectionClass->getProperty('amount');
        // privateプロパティのアクセス範囲を設定（trueを指定でアクセスできるようになる）
        $p_amount->setAccessible(true);
        /** @var MoneyStorageEventAmount $amount */
        $amount = $p_amount->getValue($moneyStorageEvent2);
        $this->assertSame( 10, $amount->getValue() );

        $p_amount->setValue($moneyStorageEvent2,new MoneyStorageEventAmount(101));
        $this->moneyStorageEventRepository->save($moneyStorageEvent2);

        $m = $this->moneyStorageEventRepository->findById(2);
        // Reflectionクラスをインスタンス化
        $m_reflectionClass = new ReflectionClass($m);
        // プロパティの値を取得
        $mp_amount = $m_reflectionClass->getProperty('amount');
        // privateプロパティのアクセス範囲を設定（trueを指定でアクセスできるようになる）
        $mp_amount->setAccessible(true);
        /** @var MoneyStorageEventAmount $amount */
        $amount = $mp_amount->getValue($m);
        var_dump($amount->getValue());
        $this->assertSame( 101, $amount->getValue() );


        $m = $this->moneyStorageEventRepository->findById($moneyStorageEvent1->getId());
        $this->assertTrue($m instanceof MoneyStorageEvent);

        $m = $this->moneyStorageEventRepository->findById(3);
        $this->assertNull( $m );
    }


    public function moneyStorageEvent() : MoneyStorageEvent{
        $moneyStorageEvent = new MoneyStorageEvent(null,new MoneyStorageId(1),
            MoneyStorageEventType::out(),new MoneyStorageEventAmount(10),
            new MoneyStorageEventMemo('給料'));

        return $moneyStorageEvent;
    }
}
